From e49b92f7acda9aec5332345caa290fd0228a90c6 Mon Sep 17 00:00:00 2001
From: "xiangyang.yan" <xiangyang.yan@amlogic.com>
Date: Fri, 24 Nov 2023 17:24:50 +0800
Subject: [PATCH] eth: optimize the fix of IP address loss after resume [1/1]

PD#SWPL-141158

Problem:
network IP address loss after resume

Solution:
optimize eth suspend/resume process to resolve network IP address loss
after resume

Verify:
T963D4-AY301-K8E#097

Change-Id: I919e845bba29885b62bbae40db2a662861ab85ab
Signed-off-by: xiangyang.yan <xiangyang.yan@amlogic.com>
---
 .../ethernet/stmicro/stmmac/dwmac-meson8b.c   | 28 +------
 drivers/net/ethernet/stmicro/stmmac/stmmac.h  |  9 +++
 .../net/ethernet/stmicro/stmmac/stmmac_main.c | 73 +++++++++++++++++++
 3 files changed, 85 insertions(+), 25 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac-meson8b.c b/drivers/net/ethernet/stmicro/stmmac/dwmac-meson8b.c
index fc2a0a5b3f26..352bf5dc20f0 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-meson8b.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-meson8b.c
@@ -692,25 +692,15 @@ static int meson8b_suspend(struct device *dev)
 	struct stmmac_priv *priv = netdev_priv(ndev);
 	struct meson8b_dwmac *dwmac = priv->plat->bsp_priv;
 	struct phy_device *phydev = ndev->phydev;
-
 	int ret;
 
 	/*open wol, shutdown phy when not link*/
 	if ((wol_switch_from_user) && phydev->link) {
 		set_wol_notify_bl31(true);
 		set_wol_notify_bl30(dwmac, true);
-		priv->wolopts = 0x1 << 5;
 		/*our phy not support wol by now*/
 		phydev->irq_suspended = 0;
-		/*phy is 100M, change to 10M*/
-		if (phydev->speed != 10) {
-			pr_info("link 100M -> 10M\n");
-			backup_adv = phy_read(phydev, MII_ADVERTISE);
-			phy_write(phydev, MII_ADVERTISE, 0x61);
-			mii_lpa_to_linkmode_lpa_t(phydev->advertising, 0x61);
-			genphy_restart_aneg(phydev);
-			msleep(3000);
-		}
+		priv->wolopts = WAKE_MAGIC;
 		ret = stmmac_suspend(dev);
 		without_reset = 1;
 	} else {
@@ -724,7 +714,6 @@ static int meson8b_suspend(struct device *dev)
 		}
 		without_reset = 0;
 	}
-
 	return ret;
 }
 
@@ -735,7 +724,6 @@ static int meson8b_resume(struct device *dev)
 	struct meson8b_dwmac *dwmac = priv->plat->bsp_priv;
 	struct phy_device *phydev = ndev->phydev;
 	int ret;
-	u32 regval;
 
 	priv->wolopts = 0;
 
@@ -751,21 +739,11 @@ static int meson8b_resume(struct device *dev)
 				EV_KEY, KEY_POWER, 0);
 			input_sync(dwmac->input_dev);
 		}
-
-		if (backup_adv != 0) {
-			phy_write(phydev, MII_ADVERTISE, backup_adv);
-			mii_lpa_to_linkmode_lpa_t(phydev->advertising, backup_adv);
-			genphy_restart_aneg(phydev);
-			backup_adv = 0;
-			msleep(3000);
-			// re-enable MAC Rx/Tx to resolve network broken issue
-			regval = readl(priv->ioaddr + PRG_ETH0);
-			regval |= PRG_ETH0_MAC_ENABLE_RX | PRG_ETH0_MAC_ENABLE_TX;
-			writel(regval, priv->ioaddr + PRG_ETH0);
-		}
 		/*RTC wait linkup*/
 		pr_info("eth hold wakelock 5s\n");
 		pm_wakeup_event(dev, 5000);
+		priv->amlogic_task_action = 100;
+		stmmac_trigger_amlogic_task(priv);
 	} else {
 		if (internal_phy != 2) {
 			if (dwmac->data->resume)
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac.h b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
index 20cafe349873..efa76cd0f873 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac.h
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac.h
@@ -291,6 +291,14 @@ struct stmmac_priv {
 	struct workqueue_struct *wq;
 	struct work_struct service_task;
 
+#if IS_ENABLED(CONFIG_AMLOGIC_ETH_PRIVE)
+	/* Workqueue for Amlogic task */
+	struct workqueue_struct *amlogic_wq;
+	struct work_struct amlogic_task;
+	int amlogic_task_action;
+	int linkup_after_resume;
+#endif
+
 	/* Workqueue for handling FPE hand-shaking */
 	unsigned long fpe_task_state;
 	struct workqueue_struct *fpe_wq;
@@ -396,5 +404,6 @@ static inline int stmmac_selftest_get_count(struct stmmac_priv *priv)
 
 #if IS_ENABLED(CONFIG_AMLOGIC_ETH_PRIVE)
 void stmmac_global_err(struct stmmac_priv *priv);
+void stmmac_trigger_amlogic_task(struct stmmac_priv *priv);
 #endif
 #endif /* __STMMAC_H__ */
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 2f69e620ece4..e62d4756881c 100644
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -284,6 +284,32 @@ void stmmac_global_err(struct stmmac_priv *priv)
 	stmmac_service_event_schedule(priv);
 }
 EXPORT_SYMBOL_GPL(stmmac_global_err);
+
+static void stmmac_amlogic_task(struct work_struct *work)
+{
+	struct stmmac_priv *priv = container_of(work, struct stmmac_priv,
+			amlogic_task);
+	u32 regval;
+
+	if (priv->amlogic_task_action == 100) {
+		msleep(3000);
+		// re-enable MAC Rx/Tx to resolve network broken issue
+		regval = readl(priv->ioaddr + MAC_CTRL_REG);
+		regval |= MAC_ENABLE_RX | MAC_ENABLE_TX;
+		writel(regval, priv->ioaddr + MAC_CTRL_REG);
+		if (priv->linkup_after_resume < 2) {
+			// revert the effect of phy_speed_down() again
+			phylink_speed_up(priv->phylink);
+		}
+	}
+	priv->amlogic_task_action = 0;
+}
+
+void stmmac_trigger_amlogic_task(struct stmmac_priv *priv)
+{
+	queue_work(priv->amlogic_wq, &priv->amlogic_task);
+}
+EXPORT_SYMBOL_GPL(stmmac_trigger_amlogic_task);
 #else
 static void stmmac_global_err(struct stmmac_priv *priv)
 {
@@ -1186,12 +1212,14 @@ static void stmmac_mac_link_up(struct phylink_config *config,
 		writel(ctrl, priv->ioaddr + MAC_CTRL_REG);
 
 	stmmac_mac_set(priv, priv->ioaddr, true);
+
 #if IS_ENABLED(CONFIG_AMLOGIC_ETH_PRIVE)
 #ifdef CONFIG_PM_SLEEP
 	if (device_may_wakeup(priv->device)) {
 		pm_relax(priv->device);
 	}
 #endif
+	priv->linkup_after_resume++;
 #endif
 
 	if (phy && priv->dma_cap.eee) {
@@ -7096,6 +7124,17 @@ int stmmac_dvr_probe(struct device *device,
 
 	INIT_WORK(&priv->service_task, stmmac_service_task);
 
+#if IS_ENABLED(CONFIG_AMLOGIC_ETH_PRIVE)
+	/* Allocate workqueue for Amlogic task */
+	priv->amlogic_wq = create_singlethread_workqueue("amlogic_wq");
+	if (!priv->amlogic_wq) {
+		dev_err(priv->device, "failed to create workqueue\n");
+		ret = -ENOMEM;
+		goto error_wq_init;
+	}
+	INIT_WORK(&priv->amlogic_task, stmmac_amlogic_task);
+#endif
+
 	/* Initialize Link Partner FPE workqueue */
 	INIT_WORK(&priv->fpe_task, stmmac_fpe_lp_task);
 
@@ -7405,7 +7444,11 @@ int stmmac_suspend(struct device *dev)
 	/* Enable Power down mode by programming the PMT regs */
 	if (device_may_wakeup(priv->device) && priv->plat->pmt) {
 		stmmac_pmt(priv, priv->hw, priv->wolopts);
+#if IS_ENABLED(CONFIG_AMLOGIC_ETH_PRIVE)
+		priv->irq_wake = 0;
+#else
 		priv->irq_wake = 1;
+#endif
 	} else {
 		stmmac_mac_set(priv, priv->ioaddr, false);
 		pinctrl_pm_select_sleep_state(priv->device);
@@ -7415,6 +7458,17 @@ int stmmac_suspend(struct device *dev)
 
 	rtnl_lock();
 	if (device_may_wakeup(priv->device) && priv->plat->pmt) {
+#if IS_ENABLED(CONFIG_AMLOGIC_ETH_PRIVE)
+#ifdef CONFIG_PM_SLEEP
+		int ret;
+
+		if (wol_switch_from_user && priv->phylink->phydev->link) {
+			ret = phylink_speed_down(priv->phylink, true);
+			if (ret)
+				dev_err(priv->device, "phylink_speed_down(): auto-negotiation is incomplete\n");
+		}
+#endif
+#endif
 		phylink_suspend(priv->phylink, true);
 	} else {
 		if (device_may_wakeup(priv->device))
@@ -7481,6 +7535,10 @@ int stmmac_resume(struct device *dev)
 	if (!netif_running(ndev))
 		return 0;
 
+#if IS_ENABLED(CONFIG_AMLOGIC_ETH_PRIVE)
+	priv->linkup_after_resume = 0;
+#endif
+
 	/* Power Down bit, into the PM register, is cleared
 	 * automatically as soon as a magic packet or a Wake-up frame
 	 * is received. Anyway, it's better to manually clear
@@ -7507,6 +7565,7 @@ int stmmac_resume(struct device *dev)
 			return ret;
 	}
 
+#if !IS_ENABLED(CONFIG_AMLOGIC_ETH_PRIVE)
 	rtnl_lock();
 	if (device_may_wakeup(priv->device) && priv->plat->pmt) {
 		phylink_resume(priv->phylink);
@@ -7516,6 +7575,7 @@ int stmmac_resume(struct device *dev)
 			phylink_speed_up(priv->phylink);
 	}
 	rtnl_unlock();
+#endif
 
 	rtnl_lock();
 	mutex_lock(&priv->lock);
@@ -7537,6 +7597,19 @@ int stmmac_resume(struct device *dev)
 	mutex_unlock(&priv->lock);
 	rtnl_unlock();
 
+#if IS_ENABLED(CONFIG_AMLOGIC_ETH_PRIVE)
+	rtnl_lock();
+	if (device_may_wakeup(priv->device) && priv->plat->pmt) {
+		phylink_resume(priv->phylink);
+		phylink_speed_up(priv->phylink);
+	} else {
+		phylink_resume(priv->phylink);
+		if (device_may_wakeup(priv->device))
+			phylink_speed_up(priv->phylink);
+	}
+	rtnl_unlock();
+#endif
+
 	netif_device_attach(ndev);
 
 	return 0;
-- 
2.35.1

